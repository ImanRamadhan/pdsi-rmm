@using RigMaterialMovementWeb.Models
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    List<DDLTransporter> dataArea = (ViewBag.area != null) ? (List<DDLTransporter>)ViewBag.area : new List<DDLTransporter>();
    dataArea = dataArea.GroupBy(x => x.name).Select(x => x.First()).ToList();
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Rig Movement/Mobilization</title>

</head>
<body>

    <h3>Rig Movement/Mobilization</h3>
    <div class="form-horizontal">
        <div class="form-group">

            <input type="hidden" name="id" id="txtapproval" value="@ViewBag.approval[0].role_id" />

            <div class="row col-lg-7" style="margin-top:1%">
                <label class="col-lg-3">Area</label>

                <select class="form-control input-sm" name="ST" id="ddlareasrc">
                    <option value=""> </option>
                    @foreach (var item in dataArea)
                    {
                        <option value="@item.name">@item.name</option>

                    }
                </select>
            </div>

            <div class="row col-lg-7" style="margin-top:1%">
                <label class="col-lg-3">RIG</label>
                <select class="form-control input-sm" name="ST" id="ddlrigsrc">
                    <option value=""> </option>
                    @*@foreach (var item in ViewBag.rig)
                        {
                            <option value="@item.name">@item.name</option>

                        }*@
                </select>
            </div>
            <div class="row col-lg-7" style="margin-top:1%">
                <label class="col-lg-3">Transporter</label>
                <select class="form-control input-sm" name="ST" id="ddltransportersrc">
                    <option value=""> </option>
                    @foreach (var item in ViewBag.transporter)
                    {
                        <option value="@item.name">@item.name</option>

                    }
                </select>
            </div>

            <div class="row col-lg-7 " style="margin-top:1%">
                <label class="col-lg-3">Tanggal Mulai</label>
                <div class="col-lg-4" style="margin-left:-2.5%;">
                    <div class="input-group date">
                        <input autocomplete="off" type="text" id="txttglpekerjaansrcstart" class="form-control">
                        <div class="input-group-addon">
                            <span class="glyphicon glyphicon-th"></span>
                        </div>
                    </div>
                </div>
                <label class="col-lg-1">To</label>
                <div class="input-group date col-lg-4">
                    <input autocomplete="off" type="text" id="txttglpekerjaansrcend" class="form-control">
                    <div class="input-group-addon">
                        <span class="glyphicon glyphicon-th"></span>
                    </div>
                </div>
            </div>

        </div>
    </div>


    <div class="form-horizontal">
        <button onclick="FilterPermintaanPekerjaan()" type="button" class="btn btn-sm btn-success" style="background-color:blue; border-color:blue"><i class="glyphicon glyphicon-search"></i>Search</button>
    </div><br />
    <div class="form-horizontal">
        <button onclick="location.href='@Url.Action("Create", "RigMaterial")'" type="button" class="btn btn-sm btn-success" style="background-color:#a6c218; border-color:#a6c218"><i class="glyphicon glyphicon-file"></i>Create New</button>
    </div>

    <div class="panel panel-default">
        <div class="panel-body">
            <div class="table-responsive">
                <table id="List" class="table table-striped table-bordered table-responsive">
                    <thead>
                        <tr class="btn-primary">
                            <th rowspan="2">No</th>
                            <th rowspan="2">Action</th>
                            <th rowspan="2">Area</th>
                            <th rowspan="2">Rig</th>
                            <th colspan="2">Rute</th>
                            <th rowspan="2">Jarak (Km)</th>
                            <th rowspan="2">Transporter</th>
                            <th rowspan="2">Biaya</th>
                            <th rowspan="2">Mulai (H-1 Moving)</th>
                            <th rowspan="2">Jam</th>
                            <th colspan="2">Target</th>
                            <th rowspan="2">Hari Ke</th>
                            <th rowspan="2">Daily Target</th>
                            <th colspan="3">Move Out Kumulatif</th>
                            <th colspan="3">Move In Kumulatif</th>


                        </tr>
                        <tr class="btn-primary">

                            <th>Dari</th>
                            <th>Ke</th>
                            <th>Hari PJP</th>
                            <th>Est Trip</th>
                            <th>Trip</th>
                            <th>Persentase</th>
                            <th>Penilaian</th>
                            <th>Trip</th>
                            <th>Persentase</th>
                            <th>Penilaian</th>
                        </tr>


                    </thead>

                </table>
            </div>
        </div>
    </div>


</body>
</html>
<script>
    $(document).ready(function () {



          $("#ddlareasrc").on("change", function () {
                var Name = $(this).val();
                $.getJSON("../LaporanRekapData/GetDDLRig", { name: Name },
                    function (data) {

                        var select = $("#ddlrigsrc");
                        select.empty();
                        select.append(new Option(""));

                        if (Name != "") {

                            $.each(data, function (index, row) {
                                select.append("<option value='" + row.name + "'>" + row.name + "</option>")
                            });
                        }
                        else {
                            select.select2({
                                placeholder: "",

                            });
                        }

                    });
            });



    $("#txttglpekerjaansrcstart").datepicker({

    });
    $("#txttglpekerjaansrcend").datepicker({
       
    });
 
    var hostname = location.pathname;
    var res = hostname.replace("/RigMaterialList", "");
    var full = res + '/EditExisting'
  

        var role = $('#txtapproval').val()

            var grid = $('#List').DataTable({
                ajax: {
                    url: "@Url.Action("RigMaterial", "RigMaterial")",
                    type: "GET",
                    datatype: "json"
                },
                "columns": [
                    {
                        "data": 'id',
                        "searchable": false,
                        "orderable": false,

                    },
                    {
                        "data": "id", className: 'center', 'searchable': false, orderable: false, render: function (data, type, row, meta) {
                            return '<a href="' + full + "?param=" + row.id + '"><button type="button" class="btn btn-success"><span class="fa fa-pencil"></span></button></a>&nbsp' +
                                '<button type="button" class="btn btn-danger" onclick="deleteTransporter(' + row.id + ')"><i class="fa fa-trash-o"></i></button>'
                        }
                    },
                    { "data": 'area' },
                    { "data": 'rig' },
                    { "data": 'rute_dari' },
                    { "data": 'rute_ke' },
                    { "data": 'jarak' },
                    { "data": 'transporter' },
                    {
                        "data": 'biaya',
                        "render": function (data) {
                            var StartDateServer = data;
                            var parsedDate = addCommas(StartDateServer);


                            return "IDR" + " " + parsedDate;
                        },
                    },
                    {
                        "data": 'tanggal_mulai',
                        "render": function (data) {
                            var StartDateServer = data;
                            var parsedDate = new Date(parseInt(StartDateServer.substr(6)));
                            var formatted = ("0" + parsedDate.getDate()).slice(-2) + "-" + ("0" + (parsedDate.getMonth() + 1)).slice(-2) + "-" + parsedDate.getFullYear()

                            return formatted;
                        },
                    },
                    {
                        "data": 'tanggal_mulai',
                        "render": function (data) {
                            var StartDateServer = data;
                            var parsedDate = new Date(parseInt(StartDateServer.substr(6)));
                            var formatted = parsedDate.getHours() + ":" +
                                (parsedDate.getMinutes() < 10 ? '0' : '') + parsedDate.getMinutes();

                            return formatted;
                        },
                    },
                    { "data": 'target_hari' },
                    { "data": 'target_trip' },
                    { "data": 'harike' },
                    {
                        "data": 'DailyTargetMoveOut',
                        "render": function (data) {
                            var num = Number(data) // The Number() only visualizes the type and is not needed
                            var roundedString = num.toFixed(2);
                            var rounded = Number(roundedString) + "%"; // toFixed() returns a string (often suitable for printing already)
                            return rounded;
                        },
                    },
                    { "data": 'trip' },
                    {
                        "data": 'persentase2',
                        "render": function (data) {
                            var num = Number(data) // The Number() only visualizes the type and is not needed
                            var roundedString = num.toFixed(2);
                            var rounded = Number(roundedString) + "%"; // toFixed() returns a string (often suitable for printing already)
                            return rounded;
                        },
                    },
                    { "data": 'penilaian1' },
                    { "data": 'tripMoveIn' },
                    {
                        "data": 'persentaseMoveIn2',
                        "render": function (data) {
                            var num = Number(data) // The Number() only visualizes the type and is not needed
                            var roundedString = num.toFixed(2);
                            var rounded = Number(roundedString) + "%"; // toFixed() returns a string (often suitable for printing already)
                            return rounded;
                        },
                    },
                    { "data": 'penilaian2' },
                ],
                dom: "<'row'<'col-sm-6'l><'col-sm-6'f>>" +
                    "<'row'<'col-sm-12'tr>>" +
                    "<'row'<'col-sm-5'i><'col-sm-7'p>>",
                "columnDefs": [
                    { "searchable": true }
                ],
                "order": [[0, 'desc']]
            });
            grid.on('order.dt search.dt', function () {
                grid.column(0, { search: 'applied', order: 'applied' }).nodes().each(function (cell, i) {
                    cell.innerHTML = i + 1;
                });
            }).draw();


});

     function deleteTransporter(ID) {

        if (confirm("Are you sure you want to delete this data?")) {
            var delData = {
                id: ID
            }
            $.ajax({
                data: delData,
                url: '@Url.Action("DeleteRigMaterial", "RigMaterial")',
                type: 'POST',
                success: function (Result) {

                    location.reload();
                }
            });
        }
        return false;
    }
    function FilterPermintaanPekerjaan() {

       
         var hostname = location.pathname;
	var res = hostname.replace("/RigMaterialList", "");
	var full = res + '/EditExisting'
    var full2 =  location.protocol + '//' + /:\/\/([^\/]+)/.exec(window.location.href)[1] + '~/RigMaterial/DeleteRigMaterial';

        var getData = {
                area: $('#ddlareasrc').val(),
                rig: $('#ddlrigsrc').val(),
                transporter: $('#ddltransportersrc').val(),
                tanggal_mulai_dari: $('#txttglpekerjaansrcstart').val(),
                tanggal_mulai_sampai: $('#txttglpekerjaansrcend').val()

            }
            var grid = $('#List').DataTable({
                "destroy": true,
                ajax: {
                    url: "@Url.Action("Filter", "RigMaterial")",
                    type: "post",
                    data: getData,
                    datatype: "json"
                },
                "columns": [
                    {
                        "data": 'id',
                        "searchable": false,
                        "orderable": false,

                    },
                    {
                        "data": "id", className: 'center', 'searchable': false, orderable: false, render: function (data, type, row, meta) {
                            return '<a href="' + full + "?param=" + row.id + '"><button type="button" class="btn btn-success"><span class="fa fa-pencil"></span></button></a>&nbsp' +
                                '<a href="' + full2 + "?param=" + row.id + '"><button type="button" class="btn btn-danger"><span class="fa fa-trash"></span></button></a>'
                        }
                    },
                    { "data": 'area' },
                    { "data": 'rig' },
                    { "data": 'rute_dari' },
                    { "data": 'rute_ke' },
                    { "data": 'jarak' },
                    { "data": 'transporter' },
                     {
                        "data": 'biaya',
                        "render": function (data) {
                            var StartDateServer = data;
                            var parsedDate = addCommas(StartDateServer);


                            return "IDR" + " " + parsedDate;
                        },
                    },
                    {
                        "data": 'tanggal_mulai',
                        "render": function (data) {
                            var StartDateServer = data;
                            var parsedDate = new Date(parseInt(StartDateServer.substr(6)));
                            var finalDate = parsedDate.toLocaleDateString('en-GB'); //result as mm/dd/yyyy
                            return finalDate;
                        },
                    },
                    {
                        "data": 'tanggal_mulai',
                        "render": function (data) {
                            var StartDateServer = data;
                            var parsedDate = new Date(parseInt(StartDateServer.substr(6)));
                            var formatted = parsedDate.getHours() + ":" +
                                parsedDate.getMinutes();

                            return formatted;
                        },
                    },
                    { "data": 'target_hari' },
                    { "data": 'target_trip' },
                    { "data": 'harike' },
                     {
                "data": 'DailyTargetMoveOut',
             "render": function (data) {
                        var num = Number(data) // The Number() only visualizes the type and is not needed
                        var roundedString = num.toFixed(2);
                        var rounded = Number(roundedString) + "%"; // toFixed() returns a string (often suitable for printing already)
                        return rounded;
                },
            },
                    { "data": 'trip' },
                    {
                        "data": 'persentase2',
                        "render": function (data) {
                            var num = Number(data) // The Number() only visualizes the type and is not needed
                            var roundedString = num.toFixed(2);
                            var rounded = Number(roundedString) + "%"; // toFixed() returns a string (often suitable for printing already)
                            return rounded;
                        },
                    },
                    { "data": 'penilaian1' },
                    { "data": 'tripMoveIn' },
                    {
                        "data": 'persentaseMoveIn2',
                        "render": function (data) {
                            var num = Number(data) // The Number() only visualizes the type and is not needed
                            var roundedString = num.toFixed(2);
                            var rounded = Number(roundedString) + "%"; // toFixed() returns a string (often suitable for printing already)
                            return rounded;
                        },
                    },
                    { "data": 'penilaian2' },
                ],
                dom: "<'row'<'col-sm-6'l><'col-sm-6'f>>" +
                    "<'row'<'col-sm-12'tr>>" +
                    "<'row'<'col-sm-5'i><'col-sm-7'p>>",
                "columnDefs": [
                    { "searchable": true }
                ],
                "order": [[0, 'desc']]
            });
            grid.on('order.dt search.dt', function () {
                grid.column(0, { search: 'applied', order: 'applied' }).nodes().each(function (cell, i) {
                    cell.innerHTML = i + 1;
                });
            }).draw();
        }

    function addCommas(nStr)
{
	nStr += '';
	x = nStr.split('.');
	x1 = x[0];
	x2 = x.length > 1 ? '.' + x[1] : '';
	var rgx = /(\d+)(\d{3})/;
	while (rgx.test(x1)) {
		x1 = x1.replace(rgx, '$1' + ',' + '$2');
	}
	return x1 + x2;
}

    $.fn.digits = function(){
    return this.each(function(){
        $(this).text( $(this).text().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,") );
    })
}

     function Validation() {

    if (!$("#txttglpekerjaansrcstart").val()) {
        $("#txttglpekerjaansrcstart").focus();
        return false;
    }
    if (!$("#txttglpekerjaansrcend").val()) {
        $("#txttglpekerjaansrcend").focus();
        alert("All field must be filled");
        return false;
    }

    return true;
}
      var GetDDL = '@Url.Action("CreateDDL" ,"RigMaterial")';
    var Get = '@Url.Action("DeleteRigMaterial", "RigMaterial")';
    var Filter= '@Url.Action("Filter", "RigMaterial")';
</script>